# Programme qui demande √† l'utilisateur son nom et son √¢ge
'''print('Bonjour tout le monde !')
print("Programme qui demande le nom et l'√¢ge d'un utilisateur.")
age = int(input('Quel est votre √¢ge ? : '))
nom = input('Quel est votre nom ? : ')
print(f"Vous vous appelez {nom} et vous avez {age} ans.")
'''

# Programme qui permet d'ajouter un √©l√©ment dans une liste vide cr√©√©e au pr√©alable
'''
liste = []
liste.append('Ananas')
print(liste)
'''

# Programme qui permet de cr√©er une liste avec la fonction range(). Utilisation des fonctions max(), min() et sum()
# l'instruction \u2764 permet d'obtenir un coeur en Python
# \n permet un retour √† la ligne, \t permet de faire une tabulation vers la droite
'''
liste = list(range(10))
print(liste)
print(max(liste))
print(min(liste))
print(sum(liste))
print('a\nb')
print("J'aime le langage de programmation Python \u2764")
'''

# os est un module qui permet de g√©rer le syst√®me d'exploitation en manipulant(cr√©er, supprimer, ...) les dossiers.
'''
import os 
chemin = 'Users\LAVOISIER_TR\Desktop\Module_os'
Nouveau_dossier = os.path.join(chemin, 'Mon_dossier', 'sous_dossier', 'sous_sous_dossier')
os.removedirs(Nouveau_dossier)
'''

# Le module random contient plusieurs fonctions comme randint(), randrange(), uniform(), permettant de g√©n√©rer des valeurs num√©riques al√©atoires
# La fonction help() permet d'avoir de l'aide sur un √©l√©ment
# la fonction dir() permet d'avoir des information sur un √©l√©ment
# le module pprint contient la fonction pprint() permettant d'afficher les objets sous forme de liste
# Il ne faut jamais utiliser les fonctions qui contient __ comme par exemple __file__ etc.. car ces fonctions n'ont pas √©t√© con√ßu pour nous mais servent au fonctionnement de Python.
'''
import random
from pprint import pprint
print(dir(random))
help(random.Random)
pprint(dir(random)
pprint('Bonjour tout le monde !')
help(pprint)
'''

# Programme qui permet d'utiliser la boucle while
'''
while True:
    mdp = input("Entrer votre mot de passe ICI(minimum 8 caract√®res): ")
    longueur_mdp = "votre mot de passe est trop court !"
    if len(mdp) == 0:
         print(longueur_mdp.upper())
    elif mdp.isdigit():
        print("Votre mot de passe ne contient que des nombres !")     
    elif len(mdp) < 8:
        print(longueur_mdp.capitalize())
    else:
        print("Vous avez saisi le mot de passe r√©command√©, bravo !")
        break
print('FIN DU PROGRAMME !')

continuer = 'o'
while continuer == 'o':
    print('On continue...')
    continuer = input('Voulez-vous continuer ? o/n : ' )
    if continuer != 'o':
        print('FIN DU PROGRAMME. AU REVOIR!!!')
'''

# Utilisation de la notion des listes de compr√©hension ou compr√©hesion en liste ou list comprehension (en anglais)
'''       
liste = [1, 5, 7, 6, -8, -78, -6, -7845, 25, 75, -52]
nombres_positifs = []
for i in liste:
    if i > 0:
        nombres_positifs.append(i)
print('nombres_positifs = ', nombres_positifs)

nombres_positifs_2 = [i*52 for i in liste if i > 0]
print('nombres_positifs_2 = ', nombres_positifs_2)'''

# Quelques exercices r√©silus sur la notion des listes de compr√©hension
#---------------------------------------------------------------------------------#

#nombres = [1, 21, 5, 44, 4, 9, 5, 83, 29, 31, 25, 38]
#nombres_pairs = []
#for i in nombres:
#   if i % 2 == 0:
#    nombres_pairs.append(i)
#print(nombres_pairs)

#nombres = [1, 21, 5, 44, 4, 9, 5, 83, 29, 31, 25, 38]
#nombres_pairs = [i for i in nombres if i%2==0]
#print(nombres_pairs) --> [44, 4, 38]

#--------------------------------------------------------------------------------------#

#nombres = range(5)
#nombres = range(-10, 10)
#nombres_positifs = []
#for i in nombres:
#    if i >= 0:
#        nombres_positifs.append(i)
#print(nombres_positifs)

#nombres = range(5)
#nombres = range(-10, 10)
#nombres_positifs = [i for i in nombres if i >= 0]
#print(nombres_positifs)  --> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

#----------------------------------------------------------------------------------------#

#nombres = range(5)
#nombres_doubles = []
#for i in nombres:
#    nombres_doubles.append(i*2)
#print(nombres_doubles)

#nombres = range(5)     
#nombres_doubles = [i*2 for i in nombres]
#print(nombres_doubles) --> [0, 2, 4, 6, 8]

#------------------------------------------------------------------------------------------#

#nombres = range(10)
#nombres_inverses = []
#for i in nombres:
#    if i % 2 == 0:
#        nombres_inverses.append(i)
#    else:
#        nombres_inverses.append(-i)
#print(nombres_inverses)

#nombres = range(10)
#nombres_inverses = [i if i%2 == 0 else -i for i in nombres ]
#print(nombres_inverses)  --> [0, -1, 2, -3, 4, -5, 6, -7, 8, -9]


# Exercice qui demande √† l'utilisateur d'entrer 10 fois le nom utilisateur num√©rot√© et commen√ßant par 1 
'''for i in range(1, 11):
    print('Utilisateur ' + str(i))
'''

# Programme qui permet d'afficher les lettres d'un mot en l'envers
'''mot = 'Python'
for l in reversed(mot):
    print(l)'''    
 
# Programme qui permet d'utiliser la boucle while 
'''
continuer = 'o'
while continuer == 'o':
    print('On continue !')
    continuer = input('Voulez-vous continuer ? o/n : ')
    if continuer == 'n' or continuer != 'n':
        print('FIN DU PROGRAMME. AUREVOIR !!!')'''
        
# Programme qui demande √† l'utilisateur de saisir deux nombres
'''nom = input("Bonjour ! Quel est votre nom svp ? : ")
print(f"Bienvenue {nom}, nous allons faire un petit jeu de math√©matiques")
print('')
print('*********************************************************************')
print('')
print('\t\t\tJEU DE MATHEMATIQUES')
print('')
print('*********************************************************************')
print('')
a = b = ''
while not (a.isdigit() and b.isdigit()):
    a = input("Saisir le premier nombre : ")
    b = input("Saisir le deuxi√®me nombre : ")
    if not (a.isdigit() and b.isdigit()):
        print("Veuillez entrer deux nombres valides !")
print(f"La somme entre {a} et {b} donne {int(a) + int(b)}")
print(f"La diff√©rence entre {a} et {b} donne {int(a) - int(b)}")
print(f"La multiplication de {a} par {b} donne {int(a) * int(b)}")
print(f"La division entre {a} et {b} donne {int(a) / int(b)}")
print(f"Le modulo de {a} et {b} donne {int(a) % int(b)}")
print(f"{a} puissance {b} donne {int(a) ** int(b)}")
print('')
print('Programme termin√© avec SUCCES !!!')
print('')
print('*********************************************************************')
print('')
print('\t\t\t\tFIN DU JEU')
print('')
print('*********************************************************************')'''


# Programme qui permet de g√©rer une liste de courses
'''import sys

from wcwidth import list_versions
LISTE = []
MENU = Choisissez parmi les 5 options suivantes :
      1: Ajouter un √©l√©ment √† la liste
      2: Retirer un √©l√©ment de la liste
      3: Afficher la liste
      4: Vider la liste
      5: Quitter
      üëâ Votre choix : 
      
MENU_CHOICES = ['1', '2', '3', '4', '5']

while True:
    user_choise = ''
    while user_choise not in MENU_CHOICES:
        user_choise = input(MENU)
        if user_choise not in MENU_CHOICES:
            print("Veuillez choisir une option valide...")
        
        if user_choise == '1': # Ajouter un √©l√©ment
            item = input("Entrez le nom d'un √©l√©ment √† ajouter √† la liste de courses : ")
            LISTE.append(item)
            print(f"L'√©l√©ment {item} a bien √©t√© ajout√© √† la liste.")
        elif user_choise == '2': # Retiter un √©l√©ment
            item = input("Entrez le nom d'un √©l√©ment √† retirer de la liste de courses : ")
            if item in LISTE:
                LISTE.remove(item)
                print(f"L'√©l√©ment {item} a bien √©t√© supprim√© de la liste.")
            else:
                print(f"L'√©l√©ment {item} n0est pas dans la liste.")
        elif user_choise == '3': # Afficher la liste
            if LISTE:
                print("Voici le contenu de votre liste")
                for i, item in enumerate(LISTE, 1):
                    print(f"{i}. {item}")
                else:
                    print("Votre liste ne contient aucun √©l√©ment.")
        elif user_choise == '4': # Vider la liste
            LISTE.clear()
            print("La liste a √©t√© vid√©e de son contenu.")
        elif user_choise == '5': # Quitter
            print("A bient√¥t !")
            sys.exit()
        
        print("-" * 50)'''
        
        
# Programme du jeu myst√®re
'''from random import randint
number_to_find = randint(0, 100)
remaining_attempts = 5
print("*** Le jeu du nombre myst√®re ***")

# boucle principale
while remaining_attempts > 0:
    print(f"Il te reste {remaining_attempts} essai{'s' if remaining_attempts > 1 else ''}")
    
    # saisie de l'utilisateur
    user_choice = input("Devine le nombre : ")
    if not user_choice.isdigit(): 
        print("Veuillez entrer un nombre valide.")
        continue
    user_choice = int(user_choice)    
    if number_to_find > user_choice: # Plus grand
        print(f"Le nombre myst√®re est plus grand que {user_choice}")
    elif number_to_find < user_choice: # Plus petit
        print(f"Le nombre myst√®re est plus petit que {user_choice}")
    else: # Egal (succ√®s)
        break
    remaining_attempts -= 1
    
    # gagn√© ou perdu
    if remaining_attempts == 0:
        print(f"Domage ! Le nombre myst√®re √©tait {number_to_find}")
    else:
        print(f"Bravo ! Le nombre myt√®re √©tait bien {number_to_find}")
        print(f"Tu as trouv√© le nombre en {6 - remaining_attempts} essai")
        
    print("Fin du jeu")'''
    
# Programme qui permet d'impl√©menter un jeu
'''
 # R√®gles du jeu
Le but de ce projet est de cr√©er un jeu de r√¥le de textuel dans le terminal
    * Le jeu comporte deux joueurs : vous et un ennemi.
    * Vous commencez tous les deux avec 50 points de vie.
    * Votre personnage dispose de 3 potions qui vous permettent de r√©cup√®rer des points de vie.
    * L'ennemi ne dispose d'aucune potion.
    * Chaque potion vous permet de r√©cup√©rer un nombre al√©atoire de points de vie, compris entre 15 et 50.
    * Votre attaque inflige √† l'ennemi des d√©g√¢ts al√©atoires compris entre 5 et 10 points de vie.
    * l'attaque de l'ennemi vous inflige des d√©g√¢ts al√©atoires compris entre 5 et 15 points de vie.
    * Lorsque vous utilisez une potion, vous passez le prochain tour.
    
# D√©roul√© de la partie
Lorsque vous lancez le script, vous devez demander √† l'utilisateur s'il souhaite attaquer ou utiliser une potion : 
"Souhaitez-vous attaquer (1) ou utiliser une potion (2) ? "
Cette phrase sera demand√© √† l'utilisateur au d√©but de chaque tour.
üëâ Si l'utilisateur choisi la premi√®re option (1), vous infligez des points de d√©g√¢t √† l'ennemi.
Ces points seront compris entre 5 et 10 et d√©termin√©s et d√©termin√©s al√©atoirement par le programme.
üëâ Si l'utilisateur choisi la deuxi√®me option (2), vous prenez une potion et vous passez le tour d'apr√®s.
'''

# Programme qui permet d'impl√©menter un jeu
'''import random
ENEMY_HEALTH = 50
PLAYER_HEALTH = 50
NUMBER_OF_POTIONS = 3
SKIP_TURN = False

while True:
    # jeu du joueur
    if SKIP_TURN:
        print("Vous passez votre tour...")
        SKIP_TURN = False
    else:
        user_choice = ''
        while user_choice not in ['1', '2']:
            user_choice = input("Souhaitez-vous attaquer (1) ou utiliser une potion (2) ? ")
        if user_choice == '1': # Attaque
            your_attack = random.randint(5, 10)
            ENEMY_HEALTH -= your_attack
            print(f"Vous avez inflig√© {your_attack} points de d√©g√¢ts √† l'ennemi ‚öîÔ∏è.")
        elif user_choice == '2': # Potion
            if NUMBER_OF_POTIONS > 0:
                potion_health = random.randint(15, 50)
                PLAYER_HEALTH += potion_health
                NUMBER_OF_POTIONS -= 1
                SKIP_TURN = True
                print(f"Vous r√©cup√©rez {potion_health} points de vie ü©∏ {NUMBER_OF_POTIONS} üíâ restantes.")
            else:
                print("Vous n'avez plus de potions...")
                continue
    if ENEMY_HEALTH <= 0:
        print("Vous avez gagn√© üí™.")
        break
    
    # Attaque de l'ennemi
    enemy_attack = random.randint(5, 15)
    PLAYER_HEALTH -= enemy_attack
    print(f"L'√©n√©mi vous a inflig√© {enemy_attack} points de d√©g√¢ts ‚öîÔ∏è.")
    
    if PLAYER_HEALTH <= 0:
        print("Vous avez perdu üò¢")
        break

    # Stats
    print(f"Il vous reste {PLAYER_HEALTH} points de vie ü©∏.")
    print(f"Il reste {ENEMY_HEALTH} points de vie ü©∏ √† l'ennemi.")
    print("_*_" * 50)
print("*** FIN DU JEU ***")'''

# R√©vision sur les bases de Python --> c'est important car la r√©p√©tition, c'est la m√®re des sciences

'''def main():
    print('Bonjour tout le monde !')
    print('Python me passionne')
    def moyenne_eleve(valeurs):
        nom = input("Quel est votre nom ? : ")
        resultat = sum(valeurs)/len(valeurs)
        print(f"La moyenne de {nom} est {resultat}")
        
        
    moyenne_eleve([14, 15, 17, 12, 14.5, 20, 18.75, 16.25])
    
    
    print("Bonjour ! Je vais calculer ta moyenne ")
    nom = input("Quel est ton nom ? : ")
    print(f"Parfait {nom}, √† pr√©sent je vais te demander d'entrer tes notes.")
    note1 = float(input("Quelle est ta premi√®re note ? : "))
    note2 = float(input("Quelle est ta deuxi√®me note ? : "))
    note3 = float(input("Quelle est ta troisi√®me note ? : "))
    note4 = float(input("Quelle est ta quatri√®me note ? : "))
    note5 = float(input("Quelle est ta cinqui√®me note ? : "))
    print(f"Merci de m'avoir fourni tes notes {nom}")
    notes = [note1, note2, note3, note4, note5]
    moyenne = sum(notes)/len(notes)
    print(f"{nom}, ta moyenne est donc Moyenne =", moyenne)'''
    
    # Exercice √† faire
    # 1. R√©coler la valeur du porte monnaie d'une personne
    # 2. Cr√©er un produit qui aura pour valeur 50‚Ç¨
    # 3. Afficher la nouvelle valeur du porte  monnaie de la personne qui a achet√©e apr√®s son achat
    
    # Solution de l'exercice
    
''' print("Bonjour madame! Bienvenue dans notre supermarch√© !")
    
    input("Dites Bonjour √©galement ... : ")
    
    wallet = int(input("Combien avez-vous dans votre porte-monnaie ? : "))
    
    produit = input("Merci pour votre collaboration. Quel est le produit que vous d√©sirez ? : ")
    
    print("D'accord madame. Ce produit co√ªte 50‚Ç¨ seulement prix promo")
    
    reponse = input("Vous l'acheter ? oui ou non ? : ")
    
    if reponse == 'oui':
        print("Apr√®s achat de ce produit, il vous reste", wallet - 50, '‚Ç¨ madame !')
    elif reponse == 'non':
        print("Vous pouvez choisir un autre produit madame car la valeur de votre porte monnaie est toujours", wallet, "‚Ç¨")
    else:
        print("Je n'ai pas compris votre reponse madame.")
            
if __name__ == '__main__':
    main()
'''

# Les conditions

'''wallet = 5000

computer_price = 1200

# V√©rifier si le prix de l'ordinateur est inf√©rieur √† 1000‚Ç¨

if computer_price < 1000:
    print("Le prix de l'ordinateur est bien inf√©rieur √† 1000‚Ç¨.")
else:
    print("Non, le prix de l'ordinateur est sup√©rieur √† 1000‚Ç¨.")'''
    
# Syst√®me de v√©rification de mot de passe

'''mdp = input("Entrer votre mot de passe ICI : ")

longeur_mdp = len(mdp)

if longeur_mdp <= 8:
    print("Mot de passe trop court")
else:
    print("Mot de passe valide!")'''
    

# Exercice √† faire: place de cin√©ma
# 1. R√©colter l'√¢ge de la personne qui ach√®te les billets "Quel est votre √¢ge?"
# 2. Si la personne est mineur, elle devra payer 7‚Ç¨
# 3. Si la personne est majeur, elle devra payer 12‚Ç¨
# 4. D√©mander si la personne veut du pop-corn
# 5. Si la personne r√©pond oui, ajouter +5‚Ç¨ dans le prix total √† payer
# 6. Afficher le prix total √† payer

# Solution de l'exercice: place de cin√©ma

'''print("BIENVENUE AU CINEMA")
age = int(input("Bonjour monsieur! Quel est votre √¢ge ? : "))
reponse = input("Merci pour votre collaboration. Voulez-vous du pop-corn ? oui ou non ? : ")
print("Bien monsieur...")
if age >= 18:
    print("Vous √™tes majeur. Vous devez donc payer 12‚Ç¨ pour le billet")
    prix_total = 12 
else:
    print("Vous √™tes mineur. Vous devez donc payer 7‚Ç¨ pour le billet")
    prix_total = 7
if reponse == 'oui':
        prix_total+=5
    
print(f"Vous devez payer au total {prix_total}‚Ç¨")
print("Merci pour la paie et amusez vous bien monsieur!")'''

# La notion des listes en Python

'''
liste = ['Raoul', 'Amina', 'Rosine', 'Rodrigue', 'Patrick']

print(liste)

del liste[-1]

print(liste)

liste.pop(1)

print(liste)

liste.remove('Rosine')

print(liste)

liste.insert(1, 'SUCCES')

print(liste)

liste.insert(2, 'Le succes vous attend')

print(liste)

liste.insert(4, 'Vous √™tes des h√©ros')

print(liste)

from statistics import mean
from random import shuffle
from numpy import sort

notes = [15.5, 14, 18, 15, 14.25, 18.25, 20,]

resultat = mean(notes)

print("La moyenne de cet √©l√®ve est tout simplement", resultat)

print(notes)

shuffle(notes)

print(notes)

notes.sort()

print(notes)

# une autre fa√ßon de cr√©er une liste

infos = input("Entrer vos informations de la forme (email-pseudo-motdepasse) : ").split('-')

print("Voici vos informations : ", infos)

print("Bonjour {pseudo}, votre email est {email} et votre mot de passe est {mdp}.".format(pseudo=infos[1], email=infos[0], mdp=infos[2] ))'''

# Exercice √† faire: Syst√®me de g√©n√©rateur de phrases

# 1. Demander en console une cha√Æne de la forme mot1/mot2/mot3/mot4/mot5/mot6/mot7...
# 2. Transformer cette cha√Æne en une liste
# 3. La m√©langer
# 4. Si le nombre d'√©l√©ments de cette liste est inf√©rieur √† 10, alors afficher uniquement les deux premiers mots
# 5. Si le nombre d'√©l√©ments de cette liste est sup√©rieur ou √©gal √† 10, alors afficher les trois derniers mots

# Solution de lexercice: syst√®me de g√©n√©rateur de phrases

'''from random import shuffle
generateur_mots = input("Entrer une cha√Æne de la forme (mot1/mot2/mot3/mot4/mot5/mot6/mot7/mot8/mot9/mot10) : ").split("/")
# Affichage de la liste de mots
print(generateur_mots)
# M√©lange de la liste de mots
shuffle(generateur_mots)
# Affichage encore de la liste de mots
print(generateur_mots)
print("Le nombre d'√©l√©ments de cette liste est", len(generateur_mots))
if len(generateur_mots) < 10:
    print("Les 2 premiers mots de la liste sont donc:")
    print(generateur_mots[0], generateur_mots[1])
elif len(generateur_mots) >= 10:
    print("Les 3 derniers mots de la liste sont donc:")
    print(generateur_mots[-3], generateur_mots[-2], generateur_mots[-1])'''


# Afficher un message √† l'utilisateur lui demandant de saisir un entier n dans le but de calculer la factorielle

'''n = int(input("Saisir un entier de son choix : "))
# Fonction qui calcul la factorielle de cet entier, ici n
def calcul_factorielle(n):
    factorielle = 1
    for i in range(1, n+1):
        factorielle*=i
        return factorielle
# Construction du dictionnaire demand√©
dictionnaire = dict({})
for i in range(1, n+1):
    dictionnaire[i] = calcul_factorielle(i)
print("Le dictionnaire des factorielle est:", dictionnaire)

dico = {5: ('1!', '2!', '3!', '4!', '5!'), 3: ('1!', '2!', '3!'), 1: ('1!')}

print(dico)'''

# Notion des boucles

'''for i in range(1, 6):
    print("Vous √™tes le client n¬∞", i)
    
a = 1
while a < 6:
    print("Vous √™tes la", a, "√®me femme")
    a+=1

# It√©ration des √©l√©ments d'une liste gr√¢ce √† la boucle for
emails = ['tchoing50@gmail.com', 'lavoisiertr50@gmail.com', 'raoul3gg@gmail.com', 'programmeur550@gmail.com']
blacklist = ['raoul3gg@gmail.com']
for email in emails:
    if email in blacklist:
        print(f"Envoi interdit √† {email}")
        continue # or break
    print(f"Email envoy√© √† {email}")'''
    
    
# Exercice √† faire: jeu du juste prix

'''# 1. Choisir un nombre entre 1 et 1000
# 2. Tant que le jeu n'est pas fini, d√©mander √† l'utilisateur d'entrer un prix
# 3. S'il trouve le juste prix c'est gagn√©
# 4. S'il ne trouve pas le juste prix on affiche c'est moins ou c'est plus'''

# Solution de l'exercice: jeu du juste prix

'''from random import randint

just_price = randint(1, 1000)
while True:
    user_price = int(input("Choisir le juste prix : "))
    if user_price == just_price:
        print("Bravo ! Prix trouv√©.")
        break
    elif user_price > just_price:
        print("C'est moins")
    else:
        print("C'est plus")
print("Fin du jeu") '''

# Notion de fonctions

'''year = 2022

def next_year():
    global year
    print(f"Fin de l'ann√©e {year}")
    year+=1
    print("D√©but de l'ann√©e {annee_suivante}".format(annee_suivante=year))
    

next_year()
next_year()
next_year()
next_year()
next_year()

def addition():
    resultat = 5 + 5
    print(f"Le r√©sultat de 5 + 5 donne {resultat}")
    return resultat

a = addition()

b = 8

c = a + b

print(c)'''

# Exercice d'application 

'''# Cr√©er une fonction max() qui va renvoyer le r√©sultat le plus haut parmi deux valeurs'''

# Correction de l'exercice d'application

'''def max(a, b):
    if a > b:
        return a
    else:
        return b
    
first_value = int(input("Veuillez saisir la valeur de (a) : "))
second_value = int(input("Veuillez saisir la valeur de (b) : "))
max_value = max(first_value, second_value)
print(f"La valeur maximale entre a et b est {max_value}")'''

# Notion de r√©cursivit√© --> fonction qui s'appelle elle-m√™me

'''def add(a):
    a+=1
    print(a)
    if a < 20:
        add(a)
    
add(2)'''

# Exercice √† faire

'''# Ecrire une fonction permettant de calculer le nombre de voyelles dans un mot, il sera pris en param√®tre
# 1. D√©finir une fonction get_vowels_numbers(mot) qui va prendre en param√®tre un mot
# 2. Cr√©er un compteur de voyelles
# 3. Pour chaque lettre du mot vous v√©rifiez s'il s'agit d'une voyelle
# 4. Si c'est le cas on ajoute 1 au compteur
# 5. A la fin de la fonction, vous allez renvoyer le compteur pour savoir le nombre de voyelles dans ce mot.'''

# Correction de l'exercice

'''def get_vowels_numbers(mot):
    liste_voyelle = ['a', 'e', 'i', 'o', 'u', 'y']
    compteur_voyelles = 0
    for lettre in mot:
        if lettre in liste_voyelle:
            compteur_voyelles+=1
    print(f"{mot} contient {compteur_voyelles} voyelles")
    return compteur_voyelles


get_vowels_numbers("Bonjour tout le monde ")'''

# La programmation orient√©e OBJET en Python

'''class Voiture():
    marque = 'Peugeot'
    couleur = 'Bleue'
    
#print(f"La couleur de ma voiture est {Voiture.couleur}")
#print(f"La marque de ma voiture est {Voiture.marque}")

voiture_01 = Voiture()

print(f"J'ai √† ma possession une voiture de couleur {voiture_01.couleur} et de marque {voiture_01.marque}")

Voiture.couleur = 'noir'

Voiture.marque = 'Porsche'

print(f"J'ai √† ma possession une voiture de couleur {voiture_01.couleur} et de marque {voiture_01.marque}")

voiture_02 = Voiture()

voiture_01.couleur = 'Rouge'
voiture_01.marque = 'Toyota'
voiture_02.couleur = 'grise'
voiture_02.marque = 'Lamborghini'

print(f"Ma premi√®re voiture √† une couleur {voiture_01.couleur} et de marque {voiture_01.marque}")
print(f"Ma deuxi√®me voiture √† une couleur {voiture_02.couleur} et de marque {voiture_02.marque}")

class Voiture():
    def __init__(self, marque, couleur):
        self.marque = marque
        self.couleur = couleur
        
    def afficher_marque(self):
        print(f"Ma voiture est de marque {self.marque}")
    
    def afficher_couleur(self):
        print(f"Ma voiture est de couleur {self.couleur}")

voiture_01 = Voiture('Peugeot', 'Grise')
voiture_02 = Voiture('Lamborghini', 'noir')

voiture_01.afficher_couleur()
voiture_01.afficher_marque()
voiture_02.afficher_couleur()
voiture_02.afficher_marque()

#print(f"Voiture_01: marque --> {voiture_01.marque}, couleur --> {voiture_01.couleur}")
#rint(f"Voiture_02: marque --> {voiture_02.marque}, couleur --> {voiture_02.couleur}")

class Personnage():
    def dit(self, message):
        print(message)
        
Lavoisier_TR = Personnage()

Lavoisier_TR.dit("Bonjour tout le monde! J'apprends la POO")

from model.player import Player
from model.weapon import Weapon

knife = Weapon('couteau', 3)  
player_01 = Player('Lavoisier_TR', 10, 5)
player_02 = Player('Graven', 5, 3)

player_01.set_weapon(knife) # donne un couteau faisant 3 d√©g√¢ts au joueur !


player_01.bienvenue()
player_02.bienvenue()
#print(f"{player_02.get_pseudo()}, initialement vous avez {player_02.get_helth()} points de vie.")
#player_02.damage(2)
#print(f"{player_02.get_pseudo()}, il vous reste maintenant {player_02.get_helth()} points de vie.")

print(f"DEBUT DU COMBAT")
print(f"{player_01.get_pseudo()} attaque {player_02.get_pseudo()}")
player_01.attack_player(player_02)
print(f"{player_02.get_pseudo()} a subi {player_01.get_attack()} d√©g√¢ts de la part de {player_01.get_pseudo()}, il lui reste {player_02.get_helth()} points de vie.")
print("FIN DU COMBAT")'''

# R√©vision sur les modules en Python

'''import random

a = random.uniform(2, 5) # permet de donner des valeurs dicimales al√©atoirement

print(a)'''

# Un clin d'oeil sur la Programmation Orient√©e Objet --> POO ou Object Oriented Programming --> OPP en anglais

class Personne:
    def __init__(self, nom = '', age = 0):
        self.nom = nom
        self.age = age
        print(f"Constructeur personne: {nom}, {age} ans.")
        
    def se_presenter(self):
        self.demander_nom()
        if self.age == 0:
            print(f"Bonjour je m'appelle {self.nom}.")
        else:
             print(f"Bonjour je m'appelle {self.nom}, j'ai {self.age} ans.")
        #if self.est_majeur():
        #    print("Je suis majeur")
        #else:
        #    print("Je suis mineur")
           
    def est_majeur(self):
        return self.age >= 18
    
    def demander_nom(self):
        if self.nom == '':
            self.nom = input('Quel est votre nom ? : ')
    
    #def demander_age(self):
    #   if self.age == 0:
    #        self.age = int(input("Quel est votre √¢ge ? : "))


personne1 = Personne('Jean', 30)
personne2 = Personne('Paul', 15)
personne3 = Personne('Lavoiser', 25)
personne1.se_presenter()
#print(f"Est majeur : {personne1.est_majeur()}")
personne2.se_presenter()
#print(f"Est majeur : {personne2.est_majeur()}")
personne3.se_presenter()





    



